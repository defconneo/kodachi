#!/bin/bash
# Script written by Warith Al Maawali  
# (c) 2022 Founder of Eagle Eye Digital Solutions
# Discord channel https://discord.gg/KEFErEx
# Twitter http://twitter.com/warith2020
# Linkedin http://www.linkedin.com/in/warith1977
# http://www.digi77.com
# http://www.om77.net
# Kodachi  OS/Software/Code are strictly protected by LICENSE terms at /home/kodachi/LICENSE
#
#
# script starts here:

cd $(dirname $0) 
source Globalconfig;

 



# Get variable name to be printed from command line 
param=$1;
param2=$2;
param3=$3;


if [[ -n $param ]]
then
	if [[ $param == "thegateway" ]]
	then
		thegateway=$(read _ _ gateway _ < <(ip route list match 0/0); echo "$gateway")
		
	elif [[ $param == "themac" ]]
	then
		themac=$(cat /sys/class/net/$(find /sys/class/net ! -type d | xargs --max-args=1 realpath  | awk -F\/ '/pci/{print $NF}'|head -n1)/address)	
		
	elif [[ $param == "wifiscan" ]]
	then
		 
		for i in $( nmcli device status | awk '{print $1}' );
		do
			if [[ $i != "DEVICE" ]]
			then
				echo "Scanning device: $i";
				sudo timeout 5  sudo iwlist $i scan;
				echo ""; 
			fi
			
		done
		echo "";
		sudo nmcli device status 
		echo "";
		sudo nmcli device wifi;			
	elif [[ $param == "ram" ]]
	then
		FREE_DATA=`free -m | grep Mem` 
		CURRENT=`echo $FREE_DATA | cut -f3 -d' '`
		TOTAL=`echo $FREE_DATA | cut -f2 -d' '`
		ram=$(free | awk '/Mem/{printf("%.2f %"), $3/$2*100} /buffers\/cache/{printf(", buffers: %.2f%"), $3/$2*100}')
	elif [[ $param == "hdd" ]]
	then
		hdd=$(df -lh | awk '{if ($6 == "/") { print $5 }}' | head -1 | cut -d'%' -f1)
	elif [[ $param == "threads" ]]
	then
		threads=$(ps -eo nlwp | tail -n +2 | awk '{ num_threads += $1 } END { print num_threads }')
	elif [[ $param == "osuptime" ]]
	then		 		
		osuptime=$(uptime | awk -F'( |,|:)+' '{d=h=m=0; if ($7=="min") m=$6; else {if ($7~/^day/) {d=$6;h=$8;m=$9} else {h=$6;m=$7}}} {print d+0,"d,",h+0,"h,",m+0,"m"}')
	elif [[ $param == "systemUpdate" ]]
	then	
		xfce4-terminal -e 'bash -c "sudo bash ~/.kbase/systemupdate21; bash"' -T "System update"
	
	elif [[ $param == "getplainip" ]]
	then
		ipsource=$(cat $Jason_web_file_name | jq -r '.ServerFeed2[].kodachiipcheck'|xargs);
		getplainip=$(sudo curl -s -m 30 $ipsource )	
	elif [[ $param == "passwordChangeCheckUser" ]]
	then
		validUser=0; 
		username=$param2
		userHere=$(getent passwd $username| wc -c)
		if [[ $userHere > 0 ]]
		then
			validUser=1;			 
		else
			validUser=0;			 		
		fi
		passwordChangeCheckUser=$validUser;
	elif [[ $param == "passwordChange" ]]
	then
		validUser=0; 
		validPassword=0; 
		
		username=$param2
		password=$param3
		userHere=$(getent passwd $username| wc -c)
		if [[ $userHere > 0 ]]
		then
			validUser=1;
			salt=$(sudo getent shadow $username | cut -d$ -f3)
			epassword=$(sudo getent shadow $username | cut -d: -f2)
			match=$(python -c 'import crypt; print crypt.crypt("'"${password}"'", "$6$'${salt}'")')
			[ ${match} == ${epassword} ] && validPassword=1 || validPassword=0 
			 
		else
			validUser=0; 
			validPassword=0; 			
		fi	
		passwordChange=$validPassword;
	elif [[ $param == "passwordChangeAction" ]]
	then	
		username2=$param2
		password2=$param3
		if(sudo chpasswd <<<"$username2:$password2")
		then
			passwordChangeAction=1;			
		else
			passwordChangeAction=0;
		fi
	elif [[ $param == "tornewcirc" ]]
	then
		(echo authenticate '"Auo2@s3ks@Wdq"';echo signal newnym; echo quit) | nc localhost 9060
	elif [[ $param == "genPasswordShort" ]]
	then		
		</dev/urandom tr -dc 'A-Za-z0-9@#$%&_+=' | head -c12
	elif [[ $param == "genPasswordLong" ]]
	then
		chars='@#$%&_+='
		{ </dev/urandom LC_ALL=C grep -ao '[A-Za-z0-9]' \
				| head -n$((RANDOM % 8 + 9))
			echo ${chars:$((RANDOM % ${#chars})):1}   # Random special char.
		} \
			| shuf \
			| tr -d '\n'
		</dev/urandom tr -dc 'A-Za-z0-9@#$%&_+=' | head -c12
	elif [[ $param == "genPasswordnosymb" ]]
	then
		chars='0Wo4xY'
		{ </dev/urandom LC_ALL=C grep -ao '[A-Za-z0-9]' \
				| head -n$((RANDOM % 8 + 9))
			echo ${chars:$((RANDOM % ${#chars})):1}   # Random special char.
		} \
			| shuf \
			| tr -d '\n'
		 		
	elif [[ $param == "pingspeed" ]]
	then
		pingspeed=$(fping -B 1.0 -t 1000 -i 1 -r 0 -e -c 1 -q 9.9.9.9 2>&1 | awk -F'/' '{print $8}')
	elif [[ $param == "cpu" ]]
	then
		IFS=$' \t/' read -r load_1min load_5min load_15min load_inst_cur load_inst_tot _ </proc/loadavg
		#echo "Number of runnable processes this instant: $load_inst_cur of $load_inst_tot"
		cpu=$load_1min
	elif [[ $param == "totalprocess" ]]
	then
		loggeduserproc=$(ps haux Ou | cut '-d ' -f1 | uniq -c |grep $LOGED_USER|awk '{print $1}')
		rootproc=$(ps haux Ou | cut '-d ' -f1 | uniq -c |grep root|awk '{print $1}')
		allproc=$( echo /proc/[0-9]* | wc -w)
		totalprocess="$loggeduserproc/$rootproc/$allproc";
	elif [[ $param == "btcbalance" ]]
	then
		
		
		arr=( $(cat $Jason_web_file_name | jq -r '.ServerFeed7.btcCheckers[]') )		 
				
		rand=$[$RANDOM % ${#arr[@]}]
		UsedDomian=${arr[$rand]};		 
		 
		# Get the content only
		STR=$(echo $UsedDomian|xargs|tr -d " \t\n\r")
		SUB='###@'
		if grep -q "$SUB" <<< "$STR"; 
		then
			theURL=$(echo $UsedDomian| sed 's/###//g'|cut -d @ -f 1);
			jqparm=$(echo $UsedDomian|cut -d @ -f 2 );
		 
			theBTCaddress=$param2;
			# Kodachi wallet test: 19pufEJUkQGPJYXCfA1b7GaKSUNeYEsApU
			# Binance wallet test: 34xp4vRoCGJym3xR7yCVPFHoCNxv4Twseo		 
			mybalance=$(curl -s -m 20 -X GET "$theURL$theBTCaddress" -H  "accept: application/json" |jq -r $jqparm|xargs|tr -d " \t\n\r");
			
			STR=$(echo $UsedDomian|xargs|tr -d " \t\n\r");
			SUB='blockcypher'
			if grep -q "$SUB" <<< "$STR"; 
			then
				size=${#mybalance}  
				 
				if [[ $size -gt 10 ]] ;  			 
				then					 
					mybalance=$(($mybalance / 100000000));
				else					 
					mybalance="0.$mybalance";					
				fi
			fi
			
			STR=$(echo $UsedDomian|xargs|tr -d " \t\n\r");
			SUB='blockchain.info'			 
			if grep -q "$SUB" <<< "$STR"; 
			then
				size=${#mybalance}  
				 
				if [[ $size -gt 10 ]] ;  			 
				then					 
					mybalance=$(($mybalance / 100000000));
				else					 
					mybalance="0.$mybalance";					
				fi
			fi			
			
			btcValue=$(echo $mybalance|xargs|tr -d " \t\n\r");
			echo "$btcValue"; 
		fi 
			
	elif [[ $param == "screen" ]]
	then
		screen=$(xdpyinfo | sed -n 's/.*dim.* \([0-9]*x[0-9]*\) .*/\1/pg' | sed ':a;N;$!ba;s/\n/ /g')
	elif [[ $param == "allowusb" ]]
	then
		if(cat /etc/usbguard/usbguard-daemon.conf|grep ImplicitPolicyTarget=allow > /dev/null)
        then
			print_good "USB guard is already in allow all mode";
        else
            sudo sed -i 's/^\(ImplicitPolicyTarget\s*=\s*\).*$/\1allow/' /etc/usbguard/usbguard-daemon.conf
			sudo service usbguard restart;
			print_good "USB guard set to allow all USB devices";
        fi
    elif [[ $param == "bringtofront" ]]  
	then    
		wmctrl -a "Kodachi Dashboard";
		xdotool search --name "Kodachi Dashboard" windowraise;
		notify-send -i $notifyIcon "Kodachi Dashboard already running";
		
	elif [[ $param == "nethogsapp" ]]  
	then
		xfce4-terminal -e 'bash -c "sudo nethogs; bash"' -T "NetHogs";
	elif [[ $param == "killkodachi" ]]  
	then
	
		xfce4-terminal -e 'bash -c "sudo bash killkodachi; bash"' -T "Destroy System";
	
	elif [[ $param == "blockusb" ]]	 
	then
	
		if(cat /etc/usbguard/usbguard-daemon.conf|grep ImplicitPolicyTarget=block > /dev/null)
        then
			print_good "USB guard is already in block all mode";
        else
            sudo sed -i 's/^\(ImplicitPolicyTarget\s*=\s*\).*$/\1block/' /etc/usbguard/usbguard-daemon.conf
			sudo service usbguard restart;
			print_good "USB guard set to block all USB devices";
        fi	
    elif [[ $param == "encrswapOff" ]]
	then	    
      sudo swapoff -a;
      sudo swapoff /dev/mapper/cryptswap1;
      sudo cryptsetup remove cryptswap1;
      sudo sed -i '/cryptswap/d' /etc/crypttab;
	  sudo sed -i '/cryptswap/d' /etc/fstab;
	  sudo sed -i '/swapfile/s/^#//g' /etc/fstab;
      sudo update-initramfs -u;      
    elif [[ $param == "encrswap" ]]
	then	    
		if [[ $xP == 1000 ]]  
		then
			clear;
			print_good "Current swap files on $OS_name";
			echo "";
			sudo swapon -s;
			echo "";

			if (sudo swapon -s > /dev/null)
			then 
			
				 
				print_good "Ready to encrypt swap files on $OS_name";
				 
			
				sudo swapon -a;	
				yes|sudo ecryptfs-setup-swap;
				sudo update-initramfs -u;
				numberOfcSwaps=$(cat /etc/crypttab|grep cryptswap|wc -l);
				
				for i in $(cat /etc/crypttab|grep cryptswap|awk '{print $1}')
				do			
					sudo cryptdisks_start $i;
					sudo swapoff /dev/mapper/$i;		
					sudo mkswap /dev/mapper/$i;
					sudo swapon /dev/mapper/$i;			
					notify-send -i $notifyIcon "Swap encryption done for $i";
					print_good "Swap encryption done for $i";
				done
				sudo swapon -a;
				
			else
				print_error "Swap system is not acivated";
				notify-send -i $notifyIcon  "Swap system is not acivated";
				#exit 1;

			fi
		else

			notify-send -i $notifyIcon "Swap encryption is for installed system only";	
			print_error "Swap encryption is for installed system only";	
			#exit 1;
		fi	
	elif [[ $param == "fingerprint" ]]
	then	
		x=$(echo |openssl s_client -connect $param2:443 |& openssl x509 -fingerprint -noout| cut -d'=' -f2)
		echo $x;
	elif [[ $param == "changeallmac" ]]
	then	
		clear;
		D='/sys/class/net'
		theChangecounter=0;
		for nic in $( ls $D )
		do		
			if (cat $D/$nic/address > /dev/null)
			then
											
				themac=$(cat $D/$nic/address)
				if [ "$themac" != "00:00:00:00:00:00" ] && [ "$themac" != "" ]
				then
					if(sudo timeout 10 sudo macchanger -r $nic)
					then
					    print_good "Mac changed for $nic";
						theChangecounter=$((theChangecounter+1)) 
						echo "";
					fi
				fi
			
			fi	
		done
	elif [[ $param == "restormac" ]]
	then
		for intf in /sys/class/net/*; do
			echo "Taking ${green}$intf${reset} down";
			sudo ifconfig `basename $intf` down;
		done
        echo "";
		#sudo service tor stop > /dev/null;
		#sudo service openvpn stop > /dev/null; 
		#sudo killall tor > /dev/null;
		#sudo killall openvpn > /dev/null;
		#sudo service network-manager stop > /dev/null;
		 
		D='/sys/class/net'
		theChangecounter=0; 
		for nic in $( ls $D )
		do		
			if (cat $D/$nic/address > /dev/null)
			then
											
				themac=$(cat $D/$nic/address)
				if [ "$themac" != "00:00:00:00:00:00" ] && [ "$themac" != "" ]
				then
					if(sudo timeout 10 sudo macchanger -p $nic)
					then
					    print_good "Mac changed for $nic";
						theChangecounter=$((theChangecounter+1)) 
						echo "";
					fi
				fi
			
			fi	
		done
			
		#echo $theChangecounter;

		if [[ $theChangecounter == 0 ]]
		then
			
			print_error "Mac address could not be changed";
			
		fi
		
		for intf in /sys/class/net/*; do
			echo "Taking ${green}$intf${reset} up";
			sudo ifconfig `basename $intf` up;
		done
		
		#sudo service network-manager restart;


		echo "";
		echo "Total mac addresses changed ${green}$theChangecounter${reset}";
		echo "";
		#read -n 1 -s -r -p "${reset}Press any key to continue.....";
	
		
		
	elif [[ $param == "fastmemclean" ]]
	then
		#xP=$(id -u $LOGED_USER)
		if [[ $xP == 1000 ]] 
		then
			
			swapstatus=$(cat $Jason_file_name | jq -r .swapstatus);	        
			if [[ "$swapstatus" == *Yes* ]]
			then
				print_good "Restarting swap";
				sudo swapoff -a;
				sudo swapon -a;
			fi	
		fi
		#sudo sync; sudo echo 3 > /proc/sys/vm/drop_caches
		#sudo sync && sudo bash -c 'echo 3 > /proc/sys/vm/drop_caches';
		print_good "Running cleaning process";
		sudo sync && sudo echo 3 | sudo tee /proc/sys/vm/drop_caches;
		echo "";
		sudo free -h
		echo "";
		print_good "Ram-cache and the swap got cleared";
		notify-send -i $notifyIcon "Ram-cache and the swap got cleared";
		
		
	elif [[ $param == "wipesystem" ]]
	then
		sudo killall firefox;
		sudo bleachbit -c system.rotated_logs firefox.* bash.history libreoffice.* system.clipboard system.tmp system.trash transmission.*;
		python - <<END
import os

global logs
global detected_logs

detected_logs = []
possible_logs_list = ['/var/adm/utmp','/usr/adm/utmp','/etc/utmp','/var/log/utmp','/var/run/utmp','/var/adm/utmp','/var/run/utmp','/usr/var/adm/utmp','/var/adm/wtmp','/usr/adm/wtmp','/etc/wtmp','/var/log/wtmp','/var/adm/wtmp','/var/run/wtmp','/usr/var/adm/wtmp','/var/adm/utmpx','/usr/adm/utmpx','/usr/run/utmpx','/etc/utmpx','/var/log/utmpx','/var/run/utmpx','/usr/var/adm/utmpx','/var/adm/wtmpx','/usr/adm/wtmpx','/etc/wtmpx','/var/log/wtmpx','/var/run/wtmpx','/usr/adm/wtmpx','/usr/var/adm/wtmpx','/var/adm/lastlog','/usr/adm/lastlog','/etc/lastlog','/var/log/lastlog','/usr/adm/lastlog','/usr/run/lastlog','/usr/var/adm/lastlog','/var/adm/pacct','/var/account/pacct','/var/log/acct','/var/log/pacct','/var/adm/acct','/var/adm/pacct','/var/account/acct','/usr/adm/acct','/var/log/prelude.log','/var/log/prelude/prelude.log','/var/adm/prelude/prelude.log','/var/adm/prelude/log/prelude.log','/var/adm/log/prelude.log','/var/ids/log/prelude.log','/var/ids/prelude/log/prelude.log','/var/ids/prelude.log','/var/prelude/prelude.log','/var/prelude/log/prelude.log','/home/log/prelude.log','/home/ids/log/prelude.log','/home/prelude/log/prelude.log','/home/ids/prelude.log','/home/prelude/prelude.log','/home/log/prelude.log','/usr/local/var/log/prelude.log','/var/log/prelude-xml.log','/var/log/prelude/prelude-xml.log','/var/adm/prelude/prelude-xml.log','/var/adm/prelude/log/prelude-xml.log','/var/adm/log/prelude-xml.log','/var/ids/log/prelude-xml.log','/var/ids/prelude/log/prelude-xml.log','/var/ids/prelude-xml.log','/var/prelude/prelude-xml.log','/var/prelude/log/prelude-xml.log','/home/log/prelude-xml.log','/home/ids/log/prelude-xml.log','/home/prelude/log/prelude-xml.log','/home/ids/prelude-xml.log','/home/prelude/prelude-xml.log','/home/log/prelude-xml.log','/usr/local/var/log/prelude-xml.log','/var/log/samba/log.smbd','/var/log/samba/log.nmbd','/var/log/log.smbd','/var/log/log.nmbd','/var/log/smb/log.smbd','/var/log/smb/log.nmbd','/home/samba/log.smbd','/home/samba/log.nmbd','/home/samba/log/log.smbd','/home/samba/log/log.nmbd','/home/samba/logs/log.smbd','/home/samba/logs/log.nmbd','/var/log/snort/snort.alert','/var/log/snort.alert','/var/log/ids/snort.alert','/var/ids/snort/snort.alert','/var/ids/snort.alert','/var/snort/snort.alert','/home/snort/snort.alert','/home/snort/log/snort.alert','/home/log/snort/snort.alert','/home/log/snort.alert','/home/ids/snort/snort.alert','/home/ids/snort.alert','/usr/local/ids/snort.alert','/usr/local/var/snort.alert','/usr/local/snort/snort.alert','/usr/local/var/log/snort.alert','/usr/local/snort/log/snort.alert','/usr/local/ids/log/snort.alert','/usr/local/log/snort.alert','/usr/local/log/snort/snort.alert','/var/log/apache2/audit_log','/var/log/apache1/audit_log','/var/log/apache/audit_log','/home/apache2/log/audit_log','/home/apache1/log/audit_log','/home/apache/log/audit_log','/home/http/log/audit_log','/home/httpd/log/audit_log','/var/log/http/audit_log','/var/log/httpd/audit_log','/usr/http/log/audit_log','/usr/httpd/log/audit_log','/usr/local/http/log/audit_log','/usr/local/httpd/log/audit_log','/usr/local/apache/log/audit_log','/usr/local/apache2/log/audit_log','/usr/local/apache1/log/audit_log','/var/www/log/audit_log','/var/http/log/audit_log','/var/httpd/log/audit_log','/var/apache/log/audit_log','/var/apache2/log/audit_log','/var/apache1/log/audit_log','/root/.bash_history','/root/.history','/root/.sh_history','/.bash_history','/.history','/.sh_history','/tmp/.bash_history','/tmp/.sh_history','/tmp/.history','/home/apache/.bash_history','/home/apache/.sh_history','/home/apache/.history','/home/apache1/.bash_history','/home/apache1/.sh_history','/home/apache1/.history','/home/apache2/.bash_history','/home/apache2/.sh_history','/home/apache2/.history','/home/httpd/.bash_history','/home/httpd/.sh_history','/home/httpd/.history','/home/ftpd/.bash_history','/home/ftpd/.sh_history','/home/ftpd/.history','/var/log/apache2/access_log','/var/log/apache2/access_log.1','/var/log/apache2/access_log.2','/var/log/apache2/error_log','/var/log/apache2/error_log.1','/var/log/apache2/error_log.2','/var/log/apache2/ssl_access_log','/var/log/apache2/ssl_access_log.1','/var/log/apache2/ssl_access_log.2','/var/log/apache2/ssl_error_log','/var/log/apache2/ssl_request_log','/var/log/apache2/request_log','/var/log/apache/access_log','/var/log/apache/access_log.1','/var/log/apache/access_log.2','/var/log/apache/error_log','/var/log/apache/error_log.1','/var/log/apache/error_log.2','/var/log/apache/ssl_access_log','/var/log/apache/ssl_error_log','/var/log/apache/ssl_request_log','/var/log/apache/request_log','/var/log/apache1/access_log','/var/log/apache1/error_log','/var/log/apache1/ssl_access_log','/var/log/apache1/ssl_error_log','/var/log/apache1/ssl_request_log','/var/log/apache1/request_log','/var/www/log/access_log','/var/www/log/error_log','/var/www/log/ssl_access_log','/var/www/log/ssl_error_log','/var/www/log/ssl_request_log','/var/www/log/request_log','/var/apache2/access_log','/var/apache2/error_log','/var/apache2/ssl_access_log','/var/apache2/ssl_error_log','/var/apache2/ssl_request_log','/var/apache2/request_log','/home/apache2/access_log','/home/apache2/error_log','/home/apache2/ssl_access_log','/home/apache2/ssl_error_log','/home/apache2/ssl_request_log','/home/apache2/request_log','/var/web/log/access_log','/var/web/log/error_log','/var/web/log/ssl_access_log','/var/web/log/ssl_error_log','/var/web/log/ssl_request_log','/var/web/log/request_log','/var/apache/access_log','/var/apache/error_log','/var/apache/ssl_access_log','/var/apache/ssl_error_log','/var/apache/ssl_request_log','/var/apache/request_log','/home/apache/access_log','/home/apache/error_log','/home/apache/ssl_access_log','/home/apache/ssl_error_log','/home/apache/ssl_request_log','/home/apache/request_log','/var/apache1/access_log','/var/apache1/error_log','/var/apache1/ssl_access_log','/var/apache1/ssl_error_log','/var/apache1/ssl_request_log','/var/apache1/request_log','/home/apache1/access_log','/home/apache1/error_log','/home/apache1/ssl_access_log','/home/apache1/ssl_error_log','/home/apache1/ssl_request_log','/home/apache1/request_log','/usr/apache1/error_log','/usr/apache1/ssl_access_log','/usr/apache1/ssl_error_log','/usr/apache1/ssl_request_log','/usr/apache1/request_log','/usr/local/apache1/error_log','/usr/local/apache1/ssl_access_log','/usr/local/apache1/ssl_error_log','/usr/local/apache1/ssl_request_log','/usr/local/apache1/request_log','/usr/apache2/error_log','/usr/apache2/ssl_access_log','/usr/apache2/ssl_error_log','/usr/apache2/ssl_request_log','/usr/apache2/request_log','/usr/local/apache2/error_log','/usr/local/apache2/ssl_access_log','/usr/local/apache2/ssl_error_log','/usr/local/apache2/ssl_request_log','/usr/local/apache2/request_log','/usr/apache/error_log','/usr/apache/ssl_access_log','/usr/apache/ssl_error_log','/usr/apache/ssl_request_log','/usr/apache/request_log','/usr/local/apache/error_log','/usr/local/apache/ssl_access_log','/usr/local/apache/ssl_error_log','/usr/local/apache/ssl_request_log','/usr/local/apache/request_log','/usr/local/httpd/access_log','/usr/local/httpd/ssl_access_log','/usr/local/httpd/error_log','/usr/local/httpd/ssl_error_log','/usr/local/httpd/ssl_request_log','/home/httpd/access_log','/home/httpd/ssl_access_log','/home/httpd/error_log','/home/httpd/ssl_error_log','/var/adm/SYSLOG','/var/adm/sulog','/var/adm/utmp','/var/adm/utmpx','/var/adm/wtmp','/var/adm/wtmpx','/var/adm/lastlog/username','/usr/spool/lp/log','/var/adm/lp/lpd-errs','/usr/lib/cron/log','/var/adm/loginlog','/var/adm/pacct','/var/adm/dtmp','/var/adm/acct/sum/loginlog','/var/adm/X0msgs','/var/adm/crash/vmcore','/var/adm/crash/unix','/var/adm/pacct','/var/adm/wtmp','/var/adm/dtmp','/var/adm/qacct','/var/adm/sulog','/var/adm/ras/errlog','/var/adm/ras/bootlog','/var/adm/cron/log','/etc/utmp','/etc/security/lastlog','/etc/security/failedlogin','/usr/spool/mqueue/syslog','/var/adm/messages','/var/adm/aculogs','/var/adm/aculog','/var/adm/sulog','/var/adm/vold.log','/var/adm/wtmp','/var/adm/wtmpx','/var/adm/utmp','/var/adm/utmpx','/var/adm/log/asppp.log','/var/log/syslog','/var/log/POPlog','/var/log/authlog','/var/log/auth1.log','/var/adm/pacct','/var/lp/logs/lpsched','/var/lp/logs/lpNet','/var/lp/logs/requests','/var/cron/log','/var/saf/_log','/var/saf/port/log','/var/adm/utmp','/var/log/utmp','/var/run/utmp','/var/adm/utmp','/var/run/utmp','/usr/var/adm/utmp','/var/adm/wtmp','/var/log/wtmp','/var/adm/wtmp','/var/run/wtmp','/usr/var/adm/wtmp','/var/adm/utmpx','/var/log/utmpx','/var/run/utmpx','/usr/var/adm/utmpx','/var/adm/wtmpx','/var/log/wtmpx','/var/run/wtmpx','/usr/var/adm/wtmpx','/var/adm/lastlog','/var/log/lastlog','/usr/var/adm/lastlog','/var/adm/pacct','/var/account/pacct','/var/log/acct','/var/log/pacct','/var/adm/acct','/var/adm/pacct','/var/account/acct','/var/log/prelude.log','/var/log/prelude/prelude.log','/var/adm/prelude/prelude.log','/var/adm/prelude/log/prelude.log','/var/adm/log/prelude.log','/var/ids/log/prelude.log','/var/ids/prelude/log/prelude.log','/var/ids/prelude.log','/var/prelude/prelude.log','/var/prelude/log/prelude.log','/usr/local/var/log/prelude.log','/var/log/prelude-xml.log','/var/log/prelude/prelude-xml.log','/var/adm/prelude/prelude-xml.log','/var/adm/prelude/log/prelude-xml.log','/var/adm/log/prelude-xml.log','/var/ids/log/prelude-xml.log','/var/ids/prelude/log/prelude-xml.log','/var/ids/prelude-xml.log','/var/prelude/prelude-xml.log','/var/prelude/log/prelude-xml.log','/usr/local/var/log/prelude-xml.log','/var/log/samba/log.smbd','/var/log/samba/log.nmbd','/var/log/log.smbd','/var/log/log.nmbd','/var/log/smb/log.smbd','/var/log/smb/log.nmbd','/var/log/snort/snort.alert','/var/log/snort.alert','/var/log/ids/snort.alert','/var/ids/snort/snort.alert','/var/ids/snort.alert','/var/snort/snort.alert','/usr/local/var/snort.alert','/usr/local/var/log/snort.alert','/var/log/apache2/audit_log','/var/log/apache1/audit_log','/var/log/apache/audit_log','/var/log/http/audit_log','/var/log/httpd/audit_log','/var/www/log/audit_log','/var/http/log/audit_log','/var/httpd/log/audit_log','/var/apache/log/audit_log','/var/apache2/log/audit_log','/var/apache1/log/audit_log','/var/log/apache2/access_log','/var/log/apache2/access_log.1','/var/log/apache2/access_log.2','/var/log/apache2/error_log','/var/log/apache2/error_log.1','/var/log/apache2/error_log.2','/var/log/apache2/ssl_access_log','/var/log/apache2/ssl_access_log.1','/var/log/apache2/ssl_access_log.2','/var/log/apache2/ssl_error_log','/var/log/apache2/ssl_request_log','/var/log/apache2/request_log','/var/log/apache/access_log','/var/log/apache/access_log.1','/var/log/apache/access_log.2','/var/log/apache/error_log','/var/log/apache/error_log.1','/var/log/apache/error_log.2','/var/log/apache/ssl_access_log','/var/log/apache/ssl_error_log','/var/log/apache/ssl_request_log','/var/log/apache/request_log','/var/log/apache1/access_log','/var/log/apache1/error_log','/var/log/apache1/ssl_access_log','/var/log/apache1/ssl_error_log','/var/log/apache1/ssl_request_log','/var/log/apache1/request_log','/var/www/log/access_log','/var/www/log/error_log','/var/www/log/ssl_access_log','/var/www/log/ssl_error_log','/var/www/log/ssl_request_log','/var/www/log/request_log','/var/apache2/access_log','/var/apache2/error_log','/var/apache2/ssl_access_log','/var/apache2/ssl_error_log','/var/apache2/ssl_request_log','/var/apache2/request_log','/var/web/log/access_log','/var/web/log/error_log','/var/web/log/ssl_access_log','/var/web/log/ssl_error_log','/var/web/log/ssl_request_log','/var/web/log/request_log','/var/apache/access_log','/var/apache/error_log','/var/apache/ssl_access_log','/var/apache/ssl_error_log','/var/apache/ssl_request_log','/var/apache/request_log','/var/apache1/access_log','/var/apache1/error_log','/var/apache1/ssl_access_log','/var/apache1/ssl_error_log','/var/apache1/ssl_request_log','/var/apache1/request_log','/var/log','/var/adm','/var/spool/mqueue','/var/mail','/var/log/emerge.log','/var/log/Xorg.0.log','/root/.bash_history','/root/.bash_logout','/usr/local/apache/logs','/usr/local/apache/log','/var/apache/logs','/var/apache/log','/var/run/utmp','/var/logs','/var/log','/var/adm','/etc/wtmp','/etc/utmp','/var/log/lastlog','/var/log/syslog','/var/log/messages','/var/log/httpd/access_log','/var/log/httpd/access.log','/var/log/httpd/error_log','/var/log/httpd/error.log','/var/log/apache2/access_log','/var/log/apache2/access.log','/var/log/apache2/error.log','/var/log/apache2/error_log','/var/log/wtmp','/var/log/secure','/var/log/xferlog','/var/log/auth.log','/var/log/lighttpd/lighttpd.error.log','/var/log/lighttpd/lighttpd.access.log','/var/run/utmp','/var/www/logs/access_log','/var/www/logs/access.log','/var/www/logs/error_log','/var/www/logs/error.log','/var/log/apache/access_log','/var/log/apache/access.log','/var/log/apache/error_log','/var/log/apache/error.log','/var/log/yum.log','/etc/httpd/logs/access_log','/etc/httpd/logs/access.log','/etc/httpd/logs/error_log','/etc/httpd/logs/error.log']

for x in possible_logs_list:
	if os.path.isfile(x) == True:
		detected_logs.append(x)
		clean_detected_logs = "shred -vfzu " + x + " > /dev/null 2>&1 && touch " + x + " > /dev/null 2>&1" 
		os.system(clean_detected_logs)
			
END
	 
		command &&
		for logs in `find / -name "*.log"`; do
				shred -vfzu $logs 
				touch $logs 
		done &> /dev/null
		shred -vfzu Authentication.log Log.log Test Tests.log &> /dev/null
		sudo wipe -rf /var/log/tor/notices.log;
		sudo wipe -rf /var/log/;
		sudo wipe -rf /home/kodachi/.kbase/core;
		sudo wipe -rf /home/kodachi/core;
		sudo wipe -rf /root/core;
		sudo wipe -rf /core;
		sudo find $Myhome_path -name 'core' -print0 | xargs -0 rm -f 	
		notify-send -i $notifyIcon "Logs wiping completed";
	elif [[ $param == "currentWorkspace" ]]
	then
		currentWorkspace=$(wmctrl -d | awk '{ if ($2 == "'*'") print $10}')	
	elif [[ $param == "changetimezon" ]]
	then
		TZURL=$(cat $Jason_web_file_name | jq -r '.ServerFeed2[].timzezoneurl'|xargs);
		
		if [ -n $TZURL ] 
		then
			TZ=$(curl -s -m 30 $TZURL|xargs);
		fi
		tmz=$(timedatectl status | grep "Time zone"|xargs;)		
		#echo "$TZ#$tmz"
		if [ -n $TZ ] 
		then
			if [[ $TZ != *"$tmz"* ]]  
			then
				export TZ=$TZ; 
				cd /etc;
				ln -sf /usr/share/zoneinfo/$TZ localtime;				
				sudo timedatectl set-timezone $TZ; 
				cd $(dirname $0);
				#print_good "Timezone changed to: $TZ";
				s=$(timedatectl status | grep "Time zone"|xargs);
				echo $s;
			fi
		fi
	elif [[ $param == "TorExit" ]]
	then
		sudo bash $Mykodachi_path/torforce setoff|echo "1" > $Mykodachi_path/actionpicker|(echo authenticate '"Auo2@s3ks@Wdq"';echo SETCONF ExitNodes={$param2};echo SETCONF StrictNodes=1 ;echo signal newnym; echo quit) | nc localhost 9060|notify-send -i $notifyIcon "Tor exit country will change shortly to $param3"
	elif [[ $param == "fullrestore" ]]
	then
		bash $Mykodachi_path/remoterestore
			
	elif [[ $param == "defaulthost" ]]
	then 	
	if [[ $xP == 990 ]] 
	then
		param2="Live-OS"
    	echo "127.0.0.1 localhost
127.0.0.1 $param2

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters" > /etc/hosts; 
		echo "$param2" > /etc/hostname;			
		hostnamectl set-hostname $param2;			 
	else
		param2="Secure-OS"
    	echo "127.0.0.1 localhost
127.0.0.1 $param2

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters" > /etc/hosts; 
		echo "$param2" > /etc/hostname;		
		hostnamectl set-hostname $param2;			 
		fi	
    elif [[ $param == "manualhost" ]]
    then
    	echo "127.0.0.1 localhost
127.0.0.1 $param2

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters" > /etc/hosts; 
		echo "$param2" > /etc/hostname;			
		hostnamectl set-hostname $param2;			 
	
	elif [[ $param == "randomhost" ]]
	then
		# hostname array
		array[0]="Windows10-Enterprise "
		array[1]="Windows10-Pro"
		array[2]="Windows10-Enterprise-LTSC "
		array[3]="Windows8.1O-EM"
		array[4]="Windows8-Enterprise"
		array[5]="Windows8.1-Pro"
		array[6]="Windows7-Professional"
		array[7]="Windows7-Enterprise"
		array[8]="Windows7-Ultimate"
		array[9]="Windows-Vista-Business"
		array[10]="WindowsXP-Professional"
		array[11]="macOS11"
		array[12]="OSX10.11"
		array[13]="MacBook-Air"
		array[14]="MacBook"
		array[15]="MacBook-Pro"

		size=${#array[@]}
		index=$(($RANDOM % $size))

		echo "127.0.0.1 localhost
127.0.0.1 ${array[$index]}		

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters" > /etc/hosts; 
		echo "${array[$index]}" > /etc/hostname;
		hostnamectl set-hostname ${array[$index]};
			
	elif [[ $param == "validateip" ]]
	then
		# Validate ip
		isIPvalide=0;
		if [[ "$param2" =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$ ]]; then 
			validateip=1;
		else
			validateip=0;
		fi
	
	elif [[ $param == "digi77Status" ]]
	then
		netIP="digi77.com";
		if [[ "$(timeout 10 fping -t 2000 $netIP | grep 'alive' )" != "" ]] 
		then		
			digi77Status="1"
		else
			digi77Status="0"
		fi	
	
	elif [[ $param == "wipedocuments" ]]
	then
		for i in $Myhome_path/Documents/* ;
			do thefilename=${i}; 
			sudo wipe -f -r "$thefilename"; 
		done
		
		for i in $Myhome_path/Documents/.[a-zA-Z_-]* ;
			do thefilename=${i}; 
			sudo wipe -f -r "$thefilename"; 
		done
		
		
	elif [[ $param == "wipedownloads" ]]
	then
		for i in $Myhome_path/Downloads/* ;
			do thefilename=${i}; 
			sudo wipe -f -r "$thefilename"; 
		done
		
		for i in $Myhome_path/Download/.[a-zA-Z_-]* ;
			do thefilename=${i}; 
			sudo wipe -f -r "$thefilename"; 
		done
		
	elif [[ $param == "wipedesktop" ]]
	then
		for i in $Myhome_path/Desktop/* ;
			do thefilename=${i}; 
			sudo wipe -f -r "$thefilename"; 
		done
		
		for i in $Myhome_path/Desktop/.[a-zA-Z_-]* ;
			do thefilename=${i}; 
			sudo wipe -f -r "$thefilename"; 
		done		
	
	elif [[ $param == "md5checksum" ]]
	then
		sudo find $Myhome_path -name '@md5Sum.md5' -print0 | xargs -0 rm -f 
		find "$PWD" -type d | sort | while read dir; do [ ! -f "${dir}"/@md5Sum.md5 ] && echo "Processing " "${dir}" > /dev/null|| echo "Skipped " "${dir}" " @md5Sum.md5 already present" > /dev/null; [ ! -f "${dir}"/@md5Sum.md5 ] &&  md5sum "${dir}"/* > "${dir}"/@md5Sum.md5 ; chmod a=r "${dir}"/@md5Sum.md5;done 
		sudo chown $LOGED_USER.$LOGED_USER $Mykodachi_path/@md5Sum.md5;
		gedit $Mykodachi_path/@md5Sum.md5;
		
	elif [[ $param == "md5verify" ]]
	then
		rm -f $Mykodachi_path/checklog.txt;
		find "$PWD" -name @md5Sum.md5| sort | while read file; do cd "${file%/*}"; md5sum -c --status --ignore-missing --quiet  @md5Sum.md5; done > checklog.txt
		sudo chown $LOGED_USER.$LOGED_USER $Mykodachi_path/checklog.txt;
		gedit $Mykodachi_path/checklog.txt;
	elif [[ $param == "intaidehome" ]]
	then
		sudo aide -c /etc/aide/aide.conf --limit $Mykodachi_path --u;
		sudo cp /var/lib/aide/aide.db{.new,};
		rm -f /var/lib/aide/aide.db.new;
	elif [[ $param == "killme" ]]
	then	    
		sudo kill -9 `ps -ef | grep $param2 | grep -v grep | awk '{print $2}'`	
		echo "$param2 killed"
	elif [[ $param == "intaidesystem" ]]
	then
		sudo aideinit;
		sudo cp /var/lib/aide/aide.db{.new,};
		rm -f /var/lib/aide/aide.db.new;		
	elif [[ $param == "enablecmdhist" ]]
	then
		sed -i '/HISTSIZE=0/s/^/#/g' ~/.bashrc;
		sed -i '/HISTFILESIZE=0/s/^/#/g' ~/.bashrc;
		sed -i '/export HISTFILE/s/^/#/g' ~/.bashrc;
		sed -i '/unset HISTFILE/s/^/#/g' ~/.bashrc;
	
	elif [[ $param == "disablecmdhist" ]]
	then
		sed -i '/HISTSIZE=0/s/^#//g' ~/.bashrc;
		sed -i '/HISTFILESIZE=0/s/^#//g' ~/.bashrc;
		sed -i '/export HISTFILE/s/^#//g' ~/.bashrc;
		sed -i '/unset HISTFILE/s/^#//g' ~/.bashrc;
		
	elif [[ $param == "sendjsoninputs" ]]
	then	
	    writeToJason "$Mykodachi_path" "Mykodachi_path";
	    writeToJason "$notifyIcon" "notifyIcon";
	    writeToJason "$OS_name" "OS_name";
	    writeToJason "$Jason_web_file_name" "Jason_web_file_name";
	    writeToJason "$Kodachi_version" "Kodachi_version";
	    writeToJason "$VPN_gate_ovpn_dir" "VPN_gate_ovpn_dir";
	    writeToJason "$VPN_nord_ovpn_dir" "VPN_nord_ovpn_dir";
	    writeToJason "$VPN_kern_ovpn_dir" "VPN_kern_ovpn_dir";
	    writeToJason "$VPN_mullvad_ovpn_dir" "VPN_mullvad_ovpn_dir";	    
	    writeToJason "$VPN_hideme_ovpn_dir" "VPN_hideme_ovpn_dir";
	    writeToJason "$VPN_proton_ovpn_dir" "VPN_proton_ovpn_dir";
	    writeToJason "$VPN_configs_path" "VPN_configs_path";
	    writeToJason "$VPN_gate_ovpn_file" "VPN_gate_ovpn_file";
	    writeToJason "$VPN_nord_ovpn_file" "VPN_nord_ovpn_file";
	    writeToJason "$VPN_hideme_ovpn_file" "VPN_hideme_ovpn_file";
	    writeToJason "$VPN_proton_ovpn_file" "VPN_proton_ovpn_file";
	    writeToJason "$VPN_mullvad_ovpn_file" "VPN_mullvad_ovpn_file";
	    writeToJason "$VPN_own_ovpn_file" "VPN_own_ovpn_file";
	    writeToJason "$LOGED_USER" "LOGED_USER";	
	    writeToJason "$EXEC_USER" "EXEC_USER";	
		writeToJason "$Myhome_path" "Myhome_path";	
	    writeToJason "$Mysafebox_path" "Mysafebox_path";	    
	    writeToJason "$Mykodachi_tmp_path" "Mykodachi_tmp_path";
	    writeToJason "$Kodachi_firefox_profile_dir" "Kodachi_firefox_profile_dir";	   
	    writeToJason "$Kodachi_web_dir" "Kodachi_web_dir";	   
	    writeToJason "$Jason_file_name" "Jason_file_name";	   
	    writeToJason "$Remote_Jason_name" "Remote_Jason_name";	    
	    
	fi	
	
	echo ${!param};
fi
 


# Do not delete this!
exit 1;


