#!/bin/bash
# Script written by Warith Al Maawali  
# (c) 2022 Founder of Eagle Eye Digital Solutions
# Discord channel https://discord.gg/KEFErEx
# Twitter http://twitter.com/warith2020
# Linkedin http://www.linkedin.com/in/warith1977
# http://www.digi77.com
# http://www.om77.net
# Kodachi  OS/Software/Code are strictly protected by LICENSE terms at /home/kodachi/LICENSE
#
#
# script starts here:


cd $(dirname $0) 
source Globalconfig;

parm=$1

toriffy_Status=$(cat $Jason_file_name | jq -r .Toriffystatus);
if [[ "$toriffy_Status" == *No* ]]
then

	netStatustxt=$(cat $Jason_file_name | jq -r .InternetStatus);
	if [[ $netStatustxt == *Online* ]]
	then
		#Clean up
		sudo rm -f /etc/ufw/before.rules.*
		sudo rm -f /etc/ufw/before6.rules.*
		sudo rm -f /etc/ufw/after.rules.*
		sudo rm -f /etc/ufw/after6.rules.*
		sudo rm -f /etc/ufw/user.rules.*
		sudo rm -f /etc/ufw/user6.rules.*
		
		
		SERVICE='openvpn';
		if (ps ax | grep -v grep | grep $SERVICE > /dev/null)
		then
			
			
			# Make sure the port is correct !
			vpntype=$(cat $Jason_file_name | jq -r .VPNtype);
			thePort=$(cat $Jason_file_name | jq -r .VPNport);
			theProtocol=$(cat $Jason_file_name | jq -r .VPNprotocol);
			#theIP=$theIPu;	
			
			sanitize() {
				local s="${1?need a string}" # receive input in first argument
				s="${s//[^[:alnum:]]/-}"     # replace all non-alnum characters to -
				s="${s//+(-)/-}"             # convert multiple - to single -
				s="${s/#-}"                  # remove - from start
				s="${s/%-}"                  # remove - from end
				echo "${s,,}"                # convert to lowercase
			}
			
			thePort=$(sanitize $thePort);
			theProtocol=$(sanitize $theProtocol);
			
			thePort=$(echo $thePort | sed 's/ //g');
			theProtocol=$(echo $theProtocol | sed 's/ //g');
			
			echo "Port will be used for iptables is:$thePort"
			echo "Protocol will be used for iptables is:$theProtocol"
				
				
			
			
			echo "Getting interface used";
			x54=$(find /sys/class/net ! -type d | xargs --max-args=1 realpath  | awk -F\/ '/pci/{print $NF}'|head -n1 | sed -e 's/\s.*$//')
			echo "Interface is:$x54"
			if [ ! -n "$x54" ]     
			then 	
				print_error "Empty Interface setting it to ens33";
				x54="ens33";
			fi
					
			if [ ! -n $parm	] 
			then	
				theIP=$(cat $Jason_file_name | jq -r .VPNIP);
				print_error "No IP provided so VPNIp will be used: $theIP"; 
			else
				theIP=$parm;
				print_error "Watched ip used: $theIP" ;
			fi
			
			theSecS=$(cat $Jason_file_name | jq -r .SecurityStatus);
			if [ ! -n "$theSecS" ]     
			then 	
				print_error "Sorry try again when you have a secure VPN IP address";
				exit;
			fi
			
			if (echo $theSecS|grep "notsecure")
			then
				print_error "Sorry try again when you have a secure VPN IP address";
				exit;
			fi
			echo "The ips is:$theIP"
			if [ ! -n "$theIP" ]     
			then 	
				echo "Empty IP will try to fetch from the Internet";
				randomdomain=$(cat $Mykodachi_path/workingdomain.txt | xargs shuf -n1 -e);
				theIP=$(sudo curl -s -m 30 $randomdomain );
				theIP=$(echo $theIP | sed 's/ //g');
				if [[ "$x54" != *:* ]]
				then
					theIP=$(echo $theIP|cut -d : -f 1|tr -d " \t\n\r")
				fi 
				echo "Ip from the Internet is: " $theIP;
			fi
				
			#sudo ufw disable;
			#sudo ufw --force reset;	# this will create backup of rules in /etc/ufw/
			#sudo ufw disable;
			sudo ufw allow out on tun0 #from any to any;
			sudo ufw allow out on tun0-00 #from any to any;
			if [[ "$theProtocol" == *udp* ]]  
			then
				#echo "output is for udp";
				 
				sudo ufw allow out on $x54 proto udp from any to $theIP port $thePort;
				
				print_good "Final rule was:";
				print_good "${cayn}sudo ufw allow out on $x54 proto $theProtocol from any to $theIP port $thePort${reset}";
			else
				#echo "output is for tcp";
				sudo ufw allow out on $x54 proto tcp from any to $theIP port $thePort; 
				print_good "Final rule was:";
				print_good "${cayn}sudo ufw allow out on $x54 proto $theProtocol from any to $theIP port $thePort${reset}";
			fi
			
			sudo ufw default deny incoming;
			sudo ufw default deny outgoing; 
			sudo ufw enable;
			notify-send -t 30000 -i $notifyIcon "ufw firewall command used to filter traffic via:
Interface: $x54
Protocol: $theProtocol
Port: $thePort
IP: $theIP
If VPN disconnects you won't have Internet connection
You should click on allow all Internet traffic button to get it back";

			notify-send -t 20000 -i $notifyIcon "Only vpn traffic will be allowed if VPN is on";
		
		else
			print_error "Please connect to VPN first or wait for Kodachi to establish it then run this script";
			exit 1;
		fi
	else
		print_error "No Internet you have to be connected";
	fi
else
	notify-send -i $notifyIcon "Please disable Torified system first then run the script again!";
	print_error "Please disable Torified system first then run the script again!"
fi
echo -e "\n \n \n";

exit 1;

 
