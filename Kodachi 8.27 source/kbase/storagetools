#!/bin/bash
# Script written by Warith Al Maawali  
# (c) 2022 Founder of Eagle Eye Digital Solutions
# Discord channel https://discord.gg/KEFErEx
# Twitter http://twitter.com/warith2020
# Linkedin http://www.linkedin.com/in/warith1977
# http://www.digi77.com
# http://www.om77.net
# Kodachi  OS/Software/Code are strictly protected by LICENSE terms at /home/kodachi/LICENSE
#
#
# script starts here:

#CS
#Find mount labels
#findmnt -lo source,target,fstype,label,options,used

cd $(dirname $0) 
source Globalconfig;
while true
do
	userInput=0;
	clear;
	echo "Please choose the storage tool that you would like to run:";
	echo "";
	echo "USB tools";
	print_good "1) USB persistence (capsper-rw) for $OS_name";
	print_good "2) USB encrypted persistence (capsper-rw) for $OS_name";
	print_good "3) USB persistence for other OS Kali/ParrotOS/Tails";
	print_good "4) USB encrypted persistence for other OS Kali/ParrotOS/Tails";
	echo "";
	echo "Hard disk tools";
	print_good "5) Mount storage device as read only (Forensic)";
	print_good "6) Wipe disk free memory";
	print_good "7) Nuke luks encrypted storage device";
	echo "";
	echo "Swap memory tools";
	print_good "8) Add additional swap file";
	print_good "9) Encrypt swap files";
	echo "";
	echo "Other tools";
	print_good "10) Display advance disk information";
	print_good "11) Exit";
	echo "";
	echo "Type the number of your selection";
	read n
	case $n in
		1) userInput=1;;
		2) userInput=2;;
		3) userInput=3;;
		4) userInput=4;;
		5) userInput=5;;
		6) userInput=6;;
		7) userInput=7;;
		8) userInput=8;;
		9) userInput=9;;
		10) userInput=10;;  
		11) userInput=11;; 
		*) print_error "sorry wrong value";sleep 1;;
	esac



	if [[ $userInput = "11" ]]
	then
		print_good "bye";
		echo "";
		exit 1;
	fi


	if [[ $userInput = "10" ]]
	then
		clear;
		sudo fdisk -l;
		echo "";
		read -n 1 -s -r -p "${reset}Press any key to continue.....";
		echo "";
		findmnt -lo source,target,fstype,label,options,used;
		echo "";
		read -n 1 -s -r -p "${reset}Press any key to continue.....";
		echo "";
		lsblk;
		print_good "done";
		echo "";
		echo "";
		read -n 1 -s -r -p "${reset}Press any key to continue.....";
	fi

	if [[ $userInput = "1" ]]
	then
		DIRECTORY="$Myhome_path/Desktop";
		SIZE=1; # Size 1GB
		read -p "${cayn}Please enter the size (in GB) of casper-rw file required e.g. 1 or 2 or 3 ...etc : ";
						
		if ! [ $REPLY -eq $REPLY 2>/dev/null ]
		then
			print_error "Sorry $REPLY is not an integer please run the script again";
			exit 1;
		fi

		if ! [[ $REPLY -gt 0 ]]
		then
			print_error "Sorry value has to be > 0 please run the script again";
			exit 1;
		fi
		SIZE=$REPLY;
		while true; do
			read -p "casper-rw file size will be ${REPLY}GB is this correct|Yes/No?${reset} " yn 
			echo;
			case $yn in
				[Yy]* ) break;;
				[Nn]* ) read -p "${cayn}Ok please type the correct size ${reset}";echo;SIZE=$REPLY;;
				* ) echo "${cayn}Please answer ${reset}yes ${cayn}or ${reset}no.";;
			esac
		done



		if ! [ $REPLY -eq $REPLY 2>/dev/null ]
		then
			print_error "Sorry $REPLY is not an integer please run the script again";
			exit 1;
		fi

		if ! [[ $REPLY -gt 0 ]]
		then
			print_error "Sorry value has to be > 0 please run the script again";
			exit 1;
		fi




		NEWSIZE=$(( SIZE * 1024 * 1024))
		NEWFILENAME="$DIRECTORY/casper-rw";

		if [ -f $NEWFILENAME ]
		then
			print_error "File $NEWFILENAME exists please delete it first";
			notify-send -i $notifyIcon "File $NEWFILENAME exists please delete it first";
			echo "";
			exit 1;
		fi
		
		print_good "Now type where do you want the capser-rw file to be saved (no end slash) if left blank it will be saved in $NEWFILENAME"
		read DIR_LOC
		
		if [[ ! -n $DIR_LOC ]]
		then
			NEWFILENAME="$DIRECTORY/casper-rw";
			print_error "No location entered so will save output file to $NEWFILENAME";
		else
			NEWFILENAME="$DIR_LOC/casper-rw";
		fi
		
		
		echo "";
		print_good "Creating casper-rw this may time some time based on your file size:${SIZE}GB";
		echo "";
		read -n 1 -s -r -p "${reset}Press any key to continue.....";
		echo -e "\n"
		
		if(dd if=/dev/zero of="$NEWFILENAME" bs=1024 count="$NEWSIZE" status=none)
		then        
			 # Ubunu can work with label persistence or casper-rw 
			 # No union to be printed to persistence.conf file
			 # Ubuntu can work with only casper-rw not partitions
			 print_good "Formatting $NEWFILENAME"; 	
			 if (mkfs.ext4 -L casper-rw -F $NEWFILENAME)
			 then
				
						
				print_good "casper-rw file created and saved in $DIRECTORY
	To make $OS_name boot in persistence mode copy the file 
	$NEWFILENAME to $OS_name root of the boot USB 
	Then boot $OS_name with persistent mode option on";

				notify-send -t 30000 -i $notifyIcon "casper-rw file created and saved in $DIRECTORY
	To make $OS_name boot in persistence mode copy the file 
	$NEWFILENAME to $OS_name root of the boot USB 
	Then boot $OS_name with persistent mode option on";
		echo "";
			 else
				print_error "mkfs command failed casper-rw file formatting failed";
				notify-send -i $notifyIcon "mkfs command failed casper-rw file formatting failed";
				#exit 1;
			 
			 fi
			
		else
			print_error "dd command failed casper-rw file creation failed";
			notify-send -i $notifyIcon "dd command failed casper-rw file creation failed";
			#exit 1;
		fi

		echo "";
		read -n 1 -s -r -p "${reset}Press any key to continue.....";
	fi






	if [[ $userInput = "2" ]]
	then
		DIRECTORY="$Myhome_path/Desktop";
		SIZE=1; # Size 1GB
		read -p "${cayn}Please enter the size (in GB) of casper-rw file required e.g. 1 or 2 or 3 ...etc : ";
						
		if ! [ $REPLY -eq $REPLY 2>/dev/null ]
		then
			print_error "Sorry $REPLY is not an integer please run the script again";
			exit 1;
		fi

		if ! [[ $REPLY -gt 0 ]]
		then
			print_error "Sorry value has to be > 0 please run the script again";
			exit 1;
		fi
		SIZE=$REPLY;
		while true; do
			read -p "casper-rw file size will be ${REPLY}GB is this correct|Yes/No?${reset} " yn 
			echo;
			case $yn in
				[Yy]* ) break;;
				[Nn]* ) read -p "${cayn}Ok please type the correct size ${reset}";echo;SIZE=$REPLY;;
				* ) echo "${cayn}Please answer ${reset}yes ${cayn}or ${reset}no.";;
			esac
		done



		if ! [ $REPLY -eq $REPLY 2>/dev/null ]
		then
			print_error "Sorry $REPLY is not an integer please run the script again";
			exit 1;
		fi

		if ! [[ $REPLY -gt 0 ]]
		then
			print_error "Sorry value has to be > 0 please run the script again";
			exit 1;
		fi


		NEWSIZE=$(( SIZE * 1024 * 1024))
		NEWFILENAME="$DIRECTORY/casper-rw";

		if [ -f $NEWFILENAME ]
		then
			print_error "File $NEWFILENAME exists please delete it first";
			notify-send -i $notifyIcon "File $NEWFILENAME exists please delete it first";
			echo "";
			exit 1;
		fi
		
		print_good "Now type the future mount name for the USB VOLUME e.g. my_usb?"
		read NAME_VOL

		if [[ ! -n $NAME_VOL ]]
		then
			NAME_VOL="my_usb";
			print_error "No name entered so $NAME_VOL is set to be the name";
		fi
		
		print_good "Now type where do you want the capser-rw file to be saved (no end slash) if left blank it will be saved in $NEWFILENAME"
		read DIR_LOC
		
		if [[ ! -n $DIR_LOC ]]
		then
			NEWFILENAME="$DIRECTORY/casper-rw";
			print_error "No location entered so will save output file to $NEWFILENAME";
		else
			NEWFILENAME="$DIR_LOC/casper-rw";
		fi
		
		
		echo "";
		print_good "Creating casper-rw this may time some time based on your file size:${SIZE}GB";
		echo "";
		read -n 1 -s -r -p "${reset}Press any key to continue.....";
		echo -e "\n"

		if(dd if=/dev/zero of="$NEWFILENAME" bs=1024 count="$NEWSIZE" status=none)
		then        
					 
			print_good "Changing ownership of $NEWFILENAME to user:$LOGED_USER"; 	
			sudo chown $LOGED_USER.$LOGED_USER $NEWFILENAME;
			 
			print_good "${cayn}Now you will be asked for a password that will be used to encrypt the persistent file $NEWFILENAME";
			print_good "luksFormat $NEWFILENAME"; 
			if(cryptsetup --verbose --verify-passphrase luksFormat $NEWFILENAME)
			then
				echo "";
				print_good "${cayn}Now you will be asked for a password to open the persistent file $NEWFILENAME";
				
				print_good "luksOpen $NEWFILENAME"; 	
				if(cryptsetup luksOpen $NEWFILENAME $NAME_VOL)
				then		 
				
					 print_good "Formatting $NEWFILENAME"; 	
					 if (mkfs.ext4 -L casper-rw /dev/mapper/$NAME_VOL)
					 then
														
						print_good "Set label to  /dev/mapper/$NAME_VOL"; 	
						e2label /dev/mapper/$NAME_VOL casper-rw;

						print_good "Closing luks  /mnt/$NAME_VOL";
						cryptsetup luksClose /dev/mapper/$NAME_VOL;			
						#if [ ! -d /mnt/$NAME_VOL ]
						#then			
							#print_good "Creating directory /mnt/$NAME_VOL"; 
							#mkdir -p /mnt/$NAME_VOL;
						#else
							#print_good "Found directory /mnt/$NAME_VOL";
						#fi
						#print_good "Changing ownership of /mnt/$NAME_VOL to user:$LOGED_USER"; 
						#sudo chown $LOGED_USER.$LOGED_USER /mnt/$NAME_VOL -R
						
						#print_good "Mounting $NEWFILENAME to /mnt/$NAME_VOL";
						#mount /dev/mapper/$NAME_VOL /mnt/$NAME_VOL;
						
						#print_good "Changing ownership of /mnt/$NAME_VOL to user:$LOGED_USER"; 
						#sudo chown $LOGED_USER.$LOGED_USER /mnt/$NAME_VOL -R
						
						
						#print_good "Printing union to /mnt/$NAME_VOL/persistence.conf";
						#echo "/ union" > /mnt/$NAME_VOL/persistence.conf;
						
						#print_good "Unmounting  /mnt/$NAME_VOL";
						#if (umount /dev/mapper/$NAME_VOL;)
						#then			
							#print_good "Closing luks  /mnt/$NAME_VOL";
							#cryptsetup luksClose /dev/mapper/$NAME_VOL;
							#print_good "Deleting  /mnt/$NAME_VOL";
							#rm -f -r /mnt/$NAME_VOL;
						#else
							#print_error "Failed to unmount /mnt/$NAME_VOL":
						#fi
						
						print_good "Encrypted casper-rw file created and saved in $DIRECTORY
	To make $OS_name boot in persistence mode copy the file 
	$NEWFILENAME to $OS_name root of the boot USB 
	Then boot $OS_name with persistent mode option on";

						notify-send -t 30000 -i $notifyIcon "Encrypted casper-rw file created and saved in $DIRECTORY
	To make $OS_name boot in persistence mode copy the file 
	$NEWFILENAME to $OS_name root of the boot USB 
	Then boot $OS_name with persistent mode option on";
						echo "";
					else
						print_error "mkfs command failed casper-rw file formatting failed";
						notify-send -i $notifyIcon "mkfs command failed casper-rw file formatting failed";
						#exit 1;
					 
					fi
				else
					print_error "Opening $NEWFILENAME as $NAME_VOL failed";
					notify-send -i $notifyIcon "Opening $NEWFILENAME as $NAME_VOL failed";
					#exit 1;
				fi
			else

				print_error "Encrypting the persistent file in $NEWFILENAME failed";
				notify-send -i $notifyIcon "Encrypting the persistent file in $NEWFILENAME failed";
				#exit 1;
			fi
			
			
			
		else
			print_error "dd command failed casper-rw file creation failed";
			notify-send -i $notifyIcon "dd command failed casper-rw file creation failed";
			#exit 1;
		fi
		
		echo "";
		read -n 1 -s -r -p "${reset}Press any key to continue.....";

	fi











	if [[ $userInput = "3" ]]
	then
		clear
		fdisk -l
		echo "";
		lsblk
		echo "";
		print_good "From the list above wich one is the USB VOLUME that you want to have persistence on please type it e.g. sdb2 , sdc2?"
		read SEL_VOL 


		while true; do
			read -p "${cayn}Is the selected device ${reset}$SEL_VOL${cayn} correct|Yes/No?  ${reset}" yn 
			echo;
			case $yn in
				[Yy]* ) break;;
				[Nn]* ) read -p "${cayn}Ok please type the correct device only the name without the path / and hit enter e.g. sda2 or sdc2 ..etc ${reset}";echo;SEL_VOL=$REPLY;;
				* ) echo "${cayn}Please answer ${reset}yes ${cayn}or ${reset}no.";;
			esac
		done


		if !(lsblk|grep $SEL_VOL > /dev/null)
		then
			print_error "/dev/$SEL_VOL you selected does not exist";
			exit 1;
		fi

		print_good "Now type the future mount name for the USB VOLUME e.g. my_usb?"
		read NAME_VOL

		if [[ ! -n $NAME_VOL ]]
		then
			NAME_VOL="my_usb";
			print_error "No name entered so $NAME_VOL is set to be the name";
		fi

		echo "";	
			
		if(mkfs.ext4 -L persistence /dev/$SEL_VOL)
		then
		
			print_good "Set label to  /dev/$NAME_VOL"; 	
			e2label /dev/$SEL_VOL persistence;

			if [ ! -d /mnt/$NAME_VOL ]
			then			
				print_good "Creating directory /mnt/$NAME_VOL"; 
				mkdir -p /mnt/$NAME_VOL;
			else
				print_good "Found directory /mnt/$NAME_VOL";
			fi
							
			print_good "Mounting /dev/$NAME_VOL to /mnt/$NAME_VOL";
			mount /dev/$SEL_VOL /mnt/$NAME_VOL;

			print_good "Printing union to /mnt/$NAME_VOL/persistence.conf";
			echo "/ union" > /mnt/$NAME_VOL/persistence.conf;

					
			print_good "Unmounting  /mnt/$NAME_VOL";
			if (umount /dev/$SEL_VOL)
			then			
				
				print_good "Deleting  /mnt/$NAME_VOL";
				rm -f -r /mnt/$NAME_VOL;
				
			else
				print_error "Failed to unmount /mnt/$NAME_VOL":
			fi
			
			
			print_good "USB persistent for other OS was created successfully";
			notify-send -i $notifyIcon "USB persistent for other OS was created successfully";

			#exit 1;
		else
			print_error "Formatting /dev/$SEL_VOL as persistence failed";
			notify-send -i $notifyIcon "Formatting /dev/$SEL_VOL as persistence failed";
			#exit 1;
		
		fi	

		echo "";
		read -n 1 -s -r -p "${reset}Press any key to continue.....";

	fi











	if [[ $userInput = "4" ]]
	then
		clear
		fdisk -l
		echo "";
		lsblk
		echo "";
		print_good "From the list above wich one is the USB VOLUME that you want to have encrypted persistence on please type it e.g. sdb2 , sdc2?"
		read SEL_VOL 


		while true; do
			read -p "${cayn}Is the selected device ${reset}$SEL_VOL${cayn} correct|Yes/No?  ${reset}" yn 
			echo;
			case $yn in
				[Yy]* ) break;;
				[Nn]* ) read -p "${cayn}Ok please type the correct device only the name without the path / and hit enter e.g. sda2 or sdc2 ..etc ${reset}";echo;SEL_VOL=$REPLY;;
				* ) echo "${cayn}Please answer ${reset}yes ${cayn}or ${reset}no.";;
			esac
		done


		if !(lsblk|grep $SEL_VOL > /dev/null)
		then
			print_error "/dev/$SEL_VOL you selected does not exist";
			exit 1;
		fi



		print_good "Now type the future mount name for Luks VOLUME e.g. my_usb?"
		read NAME_VOL

		if [[ ! -n $NAME_VOL ]]
		then
			NAME_VOL="my_usb";
			print_error "No name entered so $NAME_VOL is set to be the name";
		fi

		echo "";
		print_good "${cayn}Now you will be asked for a password that will be used to encrypt the persistent file in $SEL_VOL";
		print_good "luksFormat $NEWFILENAME"; 
		if(cryptsetup --verbose --verify-passphrase luksFormat /dev/$SEL_VOL)
		then
			echo "";
			print_good "${cayn}Now you will be asked for a password to open the persistent file in $SEL_VOL";
			
			print_good "luksOpen $NEWFILENAME"; 
			if(cryptsetup luksOpen /dev/$SEL_VOL $NAME_VOL)
			then

				print_good "Formatting $NEWFILENAME"; 	
				if (mkfs.ext4 -L persistence /dev/mapper/$NAME_VOL)
				then
													
					print_good "Set label to  /dev/mapper/$NAME_VOL"; 	
					e2label /dev/mapper/$NAME_VOL persistence;
					
													
					if [ ! -d /mnt/$NAME_VOL ]
					then			
						print_good "Creating directory /mnt/$NAME_VOL"; 
						mkdir -p /mnt/$NAME_VOL;
					else
						print_good "Found directory /mnt/$NAME_VOL";
					fi
									
					print_good "Mounting $NEWFILENAME to /mnt/$NAME_VOL";
					mount /dev/mapper/$NAME_VOL /mnt/$NAME_VOL;
										
					
					print_good "Printing union to /mnt/$NAME_VOL/persistence.conf";
					echo "/ union" > /mnt/$NAME_VOL/persistence.conf;
					
					print_good "Unmounting  /mnt/$NAME_VOL";
					if (umount /dev/mapper/$NAME_VOL)
					then			
						print_good "Closing luks  /mnt/$NAME_VOL";
						cryptsetup luksClose /dev/mapper/$NAME_VOL;
						print_good "Deleting  /mnt/$NAME_VOL";
						rm -f -r /mnt/$NAME_VOL;
						
					else
						print_error "Failed to unmount /mnt/$NAME_VOL":
					fi
				
					print_good "USB encrypted persistent for other OS was created successfully";
					notify-send -i $notifyIcon "USB encrypted persistent for other OS was created successfully";

					#exit 1;
				else
				
					print_error "mkfs command failed /dev/mapper/$NAME_VOL formatting failed";
					notify-send -i $notifyIcon "mkfs command failed /dev/mapper/$NAME_VOL formatting failed";
					#exit 1;
				
				fi
			else
				print_error "Opening /dev/$SEL_VOL as $NAME_VOL failed";
				notify-send -i $notifyIcon "Opening /dev/$SEL_VOL as $NAME_VOL failed";
				#exit 1;
			
			fi
		else

			print_error "Encrypting the persistent file in $SEL_VOL failed";
			notify-send -i $notifyIcon "Encrypting the persistent file in $SEL_VOL failed";
			#exit 1;
		fi

		echo "";
		read -n 1 -s -r -p "${reset}Press any key to continue.....";

	fi






	if [[ $userInput = "5" ]]
	then
		clear
		fdisk -l
		echo "";
		lsblk
		echo "";
		print_good "From the list above wich one is the USB VOLUME that you want to mount as read only device please type it e.g. sdb2 , sdc2?"
		read SEL_VOL 


		while true; do
			read -p "${cayn}Is the selected device ${reset}$SEL_VOL${cayn} correct|Yes/No?  ${reset}" yn 
			echo;
			case $yn in
				[Yy]* ) break;;
				[Nn]* ) read -p "${cayn}Ok please type the correct device only the name without the path / and hit enter e.g. sda2 or sdc2 ..etc ${reset}";echo;SEL_VOL=$REPLY;;
				* ) echo "${cayn}Please answer ${reset}yes ${cayn}or ${reset}no.";;
			esac
		done


		if !(lsblk|grep $SEL_VOL > /dev/null)
		then
			print_error "/dev/$SEL_VOL you selected does not exist";
			exit 1;
		fi

		print_good "Now type the future mount name for the USB VOLUME e.g. my_usb?"
		read NAME_VOL

		if [[ ! -n $NAME_VOL ]]
		then
			NAME_VOL="my_usb";
			print_error "No name entered so $NAME_VOL is set to be the name";
		fi

		echo "";	
			

		if [ ! -d /mnt/$NAME_VOL ]
		then			
			print_good "Creating directory /mnt/$NAME_VOL"; 
			mkdir -p /mnt/$NAME_VOL;
		else
			print_good "Found directory /mnt/$NAME_VOL";
		fi
		print_good "Unmounting /dev/$SEL_VOL first":
		sudo umount /dev/$SEL_VOL > /dev/null;
		sudo umount -l /dev/$SEL_VOL > /dev/null;
		sudo umount -f /dev/$SEL_VOL > /dev/null;
		
		print_good "Mounting /dev/$SEL_VOL";
		if(sudo mount -r -l /dev/$SEL_VOL /mnt/$NAME_VOL)
		then
		
			print_good "Device /dev/$SEL_VOL mounted as read only successfully in /mnt/$NAME_VOL to unmount run: sudo umount /dev/$SEL_VO";
			notify-send -i $notifyIcon "Device /dev/$SEL_VOL mounted as read only successfully in /mnt/$NAME_VOL
	To unmount run:
	sudo umount /dev/$SEL_VOL";

			#exit 1;
		else
			print_error "Mounting /dev/$SEL_VOL as read only failed";
			notify-send -i $notifyIcon "Mounting /dev/$SEL_VOL as read only failed";
			#exit 1;
		
		fi	

		echo "";
		read -n 1 -s -r -p "${reset}Press any key to continue.....";

	fi

	if [[ $userInput = "6" ]]
	then
		notify-send -i $notifyIcon "Wiping free space on Disk";
		print_good "Wiping free space on Disk";
		sudo sfill -v /;
		print_good "Wiping free space done";
		notify-send -i $notifyIcon "Wiping free space done";
		echo "";
		read -n 1 -s -r -p "${reset}Press any key to continue.....";
		
	fi


	if [[ $userInput = "7" ]]
	then
		if(lsblk --fs|grep crypto_LUKS > /dev/null)   
		then
			notify-send -i $notifyIcon "Starting LUKS encrypted device Nuke process";
			lsblk --fs 
			getSDA=$(lsblk --fs|grep crypto_LUKS|awk '{print $1}'|head -n 1);
			 
			echo "";
			echo "${cayn}From the output above your LUKS encrypted drive is:${reset}$getSDA${cayn} to verify just execute: ${reset}lsblk --fs";
			echo "";		
			
			if [[ -f $Myhome_path/Desktop/header-backup ]]
			then
				print_error "Found $Myhome_path/Desktop/header-backup please delete it first";
				exit 1;
			fi 
			
			
			if [[ -f $Myhome_path/Desktop/header-backup.enc ]]
			then
				print_error "Found $Myhome_path/Desktop/header-backup.enc please delete it first";
				exit 1;
			fi 


			while true; do
				read -p "${cayn}Is the selected device ${reset}$getSDA${cayn} correct|Yes/No?  ${reset}" yn 
				echo;
				case $yn in
					[Yy]* ) break;;
					[Nn]* ) read -p "${cayn}Ok please type the correct device only the name without the path / and hit enter e.g. sda4 or sdb3 ..etc ${reset}";echo;getSDA=$REPLY;;
					* ) echo "${cayn}Please answer ${reset}yes ${cayn}or ${reset}no.";;
				esac
			done
			
			if !(lsblk|grep $getSDA > /dev/null)
			then
				print_error "/dev/$getSDA you selected does not exist";
				exit 1;
			fi
			
			if !(apt-mark showhold|grep cryptsetup-bin > /dev/null) 
			then
				echo "${cayn}Ready to install custom crypto packages";
				read -n 1 -s -r -p "${reset}Press any key to continue.....";
				echo -e "\n";
				sudo dpkg -i nukeset/libcryptsetup*.deb
				sudo dpkg -i nukeset/cryptsetup*.deb
				sudo apt-mark hold cryptsetup-bin libcryptsetup12
				echo -e "\n";		
			fi
					
			echo "${cayn}Creating backup of header file will be saved in: $Myhome_path/Desktop/header-backup";
			read -n 1 -s -r -p "${reset}Press any key to continue.....";
			echo -e "\n"
			sudo cryptsetup luksHeaderBackup /dev/$getSDA --header-backup-file $Myhome_path/Desktop/header-backup;
			print_good "${cayn}Now you will be asked for a password that will be used to encrypt or restore your header file";
			read -n 1 -s -r -p "${reset}Press any key to continue.....";
			echo -e "\n"
			if(sudo openssl enc -aes-256-cbc -salt -in $Myhome_path/Desktop/header-backup -out $Myhome_path/Desktop/header-backup.enc)
			then   
				rm -f $Myhome_path/Desktop/header-backup;
				echo "${cayn}Your header backup file has been encrypted and saved in: $Myhome_path/Desktop/header-backup.enc copy it to a safe place you will need it if you need to restore the headers of your encrypted device $getSDA"; 
				read -n 1 -s -r -p "${reset}Press any key to continue.....";
				echo -e "\n"
				print_good "${cayn}Now first you will be asked for a your normal $getSDA device encryption password (The one you enter to mount it) then you will be asked for the Nuke password that if entered it will trigger to destroy the encrypted device $getSDA if forced to reveal your data";
				echo "${reset}";
				read -n 1 -s -r -p "${reset}Press any key to continue.....";
				echo -e "\n"
				if(sudo cryptsetup luksAddNuke /dev/$getSDA)
				then 
					echo ""; 
					echo "${green}Done from now on you will use your normal password to moiunt the device $getSDA but if forced to open then use the Nuke password you have just set and $getSDA will be destroyed !";
					echo "${reset}";
					read -n 1 -s -r -p "${reset}Press any key to continue.....";
					echo -e "\n"
					echo "If you will need to resotre the header file in future just run the following command:";
					echo "${cayn}sudo openssl enc -d -aes-256-cbc -in $Myhome_path/Desktop/header-backup.enc -out $Myhome_path/Desktop/header-backup";
					echo "${reset}Then run:";
					echo "${cayn}sudo cryptsetup luksHeaderRestore /dev/$getSDA --header-backup-file $Myhome_path/Desktop/header-backup";	
					notify-send -i $notifyIcon "$OS_name Nuke process completed";	
					#exit 1;
				else			
					print_error "Nuke process for: /dev/$getSDA failed";
					notify-send -i $notifyIcon "Nuke process for: /dev/$getSDA failed";
					sudo apt-mark unhold cryptsetup-bin libcryptsetup12;
				fi
			else
				print_error "$OS_name header backup file encryption failed for: $Myhome_path/Desktop/header-backup";
				notify-send -i $notifyIcon "$OS_name header backup file encryption failed for: $Myhome_path/Desktop/header-backup";
				sudo apt-mark unhold cryptsetup-bin libcryptsetup12;
			fi
			#exit 1;
		else
			print_error "No encrypted volumes mounted on this system please mount it or create one with Zulu crypt then mount it to Nuke";
			notify-send -i $notifyIcon "No encrypted volumes mounted on this system please mount it
		Or create one with Zulu crypt then mount it to Nuke";
			#exit 1;
		fi
		echo "";
		read -n 1 -s -r -p "${reset}Press any key to continue.....";
		
	fi



	if [[ $userInput = "8" ]]
	then
		SWAPFILENAME="swapfile"
		DIRECTORY="/"
		SIZE=1          #Size in GB
		################

		get_swapfilenumber() {
				RESULT=$(swapon -s | grep -c $SWAPFILENAME)
				RESULT=$(( RESULT + 1 ))
				echo $RESULT
		}

		#xP=$(id -u $LOGED_USER);
		if [[ $xP == 1000 ]]  
		then
			clear;
			print_good "Current swap files on $OS_name";
			echo "";
			sudo swapon -s;
			echo "";
			numberOfcSwaps=$(sudo swapon -s|grep -v Filename|wc -l);
			
			if [[ $numberOfcSwaps < 2 ]]
			then
			
				if [[ $EUID -ne 0 ]]; then
						print_error "This script must be run as root";
						exit 1
				else
						
						read -p "${cayn}Please enter the size (in GB) of swap file required e.g. 1 or 2 or 3 ...etc : ";
						
						if ! [ $REPLY -eq $REPLY 2>/dev/null ]
						then
							print_error "Sorry $REPLY is not an integer please run the script again";
							exit 1;
						fi
						
						if ! [[ $REPLY -gt 0 ]]
						then
							print_error "Sorry value has to be > 0 please run the script again";
							exit 1;
						fi
						SIZE=$REPLY;
						while true; do
							read -p "Swap file size will be ${REPLY}GB is this correct|Yes/No?${reset} " yn 
							echo;
							case $yn in
								[Yy]* ) break;;
								[Nn]* ) read -p "${cayn}Ok please type the correct size ${reset}";echo;SIZE=$REPLY;;
								* ) echo "${cayn}Please answer ${reset}yes ${cayn}or ${reset}no.";;
							esac
						done
						
						
						if ! [ $REPLY -eq $REPLY 2>/dev/null ]
						then
							print_error "Sorry $REPLY is not an integer please run the script again";
							exit 1;
						fi
						
						if ! [[ $REPLY -gt 0 ]]
						then
							print_error "Sorry value has to be > 0 please run the script again";
							exit 1;
						fi				
									
						echo "";
						print_good "Creating swap this may time some time based on your file size:${SIZE}GB";
						echo "";
						read -n 1 -s -r -p "${reset}Press any key to continue.....";
						echo -e "\n"
						NEWSIZE=$(( SIZE * 1024 * 1024))
						NUMBER=$(get_swapfilenumber)
						NEWFILENAME=$DIRECTORY$SWAPFILENAME$NUMBER
						
						if(dd if=/dev/zero of="$NEWFILENAME" bs=1024 count="$NEWSIZE" status=none)
						then        
							chown root:root "$NEWFILENAME";
							chmod 0600 "$NEWFILENAME";
							echo "Making Swap...";
							mkswap "$NEWFILENAME" > /dev/null;
							swapon "$NEWFILENAME";
						else
							print_error "dd command failed";
							exit 1;
						fi
					echo "Testing /etc/fstab";
					if [ -f /etc/fstab ]; then 
						echo "$NEWFILENAME none swap sw 0 0" >> /etc/fstab
					else
						print_error "Fail:fstab not found";
					fi
					swapon -a;
					swapon -s;
					numberOfcSwaps=$(sudo swapon -s|grep -v Filename|wc -l);
					print_good "Swap added now you have total of $numberOfcSwaps swap files";	
					notify-send -i $notifyIcon "Swap added now you have total of $numberOfcSwaps swap files";
					
					if (cat /etc/crypttab|grep cryptswap > /dev/null) 
					then
						print_good "The new swap file is not encrypted please run the script again and select encrypt swap files";
						notify-send -i $notifyIcon "The new swap file is not encrypted please run the script again and select encrypt swap files";	
					fi


				fi
			else
				print_error "You already have $numberOfcSwaps swap files.You can only have max of 2 swap files or else your system may not boot up";
				notify-send -i $notifyIcon "You already have $numberOfcSwaps swap files.
		You can only have max of 2 swap files or else your system may not boot up";
			fi
		else

			notify-send -i $notifyIcon "Swap addition is for installed system only";	
			print_error "Swap addition is for installed system only";	
			#exit 1;
		fi	
		echo "";
		read -n 1 -s -r -p "${reset}Press any key to continue.....";
		
	fi


	if [[ $userInput = "9" ]]
	then
		#xP=$(id -u $LOGED_USER);
		if [[ $xP == 1000 ]]  
		then
			clear;
			print_good "Current swap files on $OS_name";
			echo "";
			sudo swapon -s;
			echo "";

			if (sudo swapon -s > /dev/null)
			then 
			
				echo "";
				print_good "Ready to encrypt swap files on $OS_name";
				read -n 1 -s -r -p "${reset}Press any key to continue.....";
				echo -e "\n"
			
				sudo swapon -a;	
				yes|sudo ecryptfs-setup-swap;
				sudo update-initramfs -u;
				numberOfcSwaps=$(cat /etc/crypttab|grep cryptswap|wc -l);
				
				for i in $(cat /etc/crypttab|grep cryptswap|awk '{print $1}')
				do			
					sudo cryptdisks_start $i;
					sudo swapoff /dev/mapper/$i;		
					sudo mkswap /dev/mapper/$i;
					sudo swapon /dev/mapper/$i;			
					notify-send -i $notifyIcon "Swap encryption done for $i";
					print_good "Swap encryption done for $i";
				done
				sudo swapon -a;
				
			else
				print_error "Swap system is not acivated";
				notify-send -i $notifyIcon  "Swap system is not acivated";
				#exit 1;

			fi
		else

			notify-send -i $notifyIcon "Swap encryption is for installed system only";	
			print_error "Swap encryption is for installed system only";	
			#exit 1;
		fi	
		echo "";
		read -n 1 -s -r -p "${reset}Press any key to continue.....";
		
	fi



done;
